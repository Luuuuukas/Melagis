//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""MarozasControls"",
            ""id"": ""a370e11c-dca3-4de2-ac63-b9051a703d02"",
            ""actions"": [
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""b7f40c68-975a-40de-956a-60890bf7ebc8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""18b3a514-c615-405d-ad81-d9cd328badef"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""03dc935b-f8cf-4a70-a601-0d743a31dd7c"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GameControls"",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""175add0f-256c-4b43-8f7d-87f443d2a626"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GameControls"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""GameControls"",
            ""bindingGroup"": ""GameControls"",
            ""devices"": []
        }
    ]
}");
        // MarozasControls
        m_MarozasControls = asset.FindActionMap("MarozasControls", throwIfNotFound: true);
        m_MarozasControls_MouseClick = m_MarozasControls.FindAction("MouseClick", throwIfNotFound: true);
        m_MarozasControls_MousePosition = m_MarozasControls.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MarozasControls
    private readonly InputActionMap m_MarozasControls;
    private IMarozasControlsActions m_MarozasControlsActionsCallbackInterface;
    private readonly InputAction m_MarozasControls_MouseClick;
    private readonly InputAction m_MarozasControls_MousePosition;
    public struct MarozasControlsActions
    {
        private @Input m_Wrapper;
        public MarozasControlsActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseClick => m_Wrapper.m_MarozasControls_MouseClick;
        public InputAction @MousePosition => m_Wrapper.m_MarozasControls_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_MarozasControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MarozasControlsActions set) { return set.Get(); }
        public void SetCallbacks(IMarozasControlsActions instance)
        {
            if (m_Wrapper.m_MarozasControlsActionsCallbackInterface != null)
            {
                @MouseClick.started -= m_Wrapper.m_MarozasControlsActionsCallbackInterface.OnMouseClick;
                @MouseClick.performed -= m_Wrapper.m_MarozasControlsActionsCallbackInterface.OnMouseClick;
                @MouseClick.canceled -= m_Wrapper.m_MarozasControlsActionsCallbackInterface.OnMouseClick;
                @MousePosition.started -= m_Wrapper.m_MarozasControlsActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_MarozasControlsActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_MarozasControlsActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_MarozasControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseClick.started += instance.OnMouseClick;
                @MouseClick.performed += instance.OnMouseClick;
                @MouseClick.canceled += instance.OnMouseClick;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public MarozasControlsActions @MarozasControls => new MarozasControlsActions(this);
    private int m_GameControlsSchemeIndex = -1;
    public InputControlScheme GameControlsScheme
    {
        get
        {
            if (m_GameControlsSchemeIndex == -1) m_GameControlsSchemeIndex = asset.FindControlSchemeIndex("GameControls");
            return asset.controlSchemes[m_GameControlsSchemeIndex];
        }
    }
    public interface IMarozasControlsActions
    {
        void OnMouseClick(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
